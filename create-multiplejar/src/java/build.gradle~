//
//
//  Take the input from the file 
//  Determine which module jar to create
//  Inject the data from the file to list and convert it to a map  with the key and value 
//  Run a loop to compile and create jars based on the injected map. Dynamicaly add the include source and jarnames
//  
//


apply plugin: 'java'


configurations {
    antcompile 
}

// Dependencies
dependencies { 
    compile fileTree(dir: '../../lib', include: ['**/*.jar','*.jar'])
    runtime fileTree(dir: '../../lib', include: ['**/*.jar','*.jar'])    
    antcompile fileTree(dir: '../../lib', include: ['**/*.jar','*.jar'])
}


//
// Returns the git tag version
//
def getVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return 'dev';
        }
}

// Clean the dist and build folder 
task cleanjar(type: Delete) {
    delete 'distribution'
}    


// Load list from the file
def sourceList=[]
def deployMap = [:]
def deployDist = new File('distribution')

task loadListtoMap {
    
    // Loading to sourcelist from source file   
    new File('module.txt').eachLine { line ->
    //  println line
    sourceList.add(line)

    }


    delete 'distribution'

    // create folder 
    deployDist.mkdirs()

    //    
    // Loading sourceList to key value paired Map          
    //
    sourceList.each{
    //Split up coma to create keyName for the map 	
	def (value1,value2) = "$it.value".tokenize( ',')

	//Adding List to map	
	deployMap.put(value1,"$it.value")
	
    }


    //
    // To perform compile java and create jars for the compiled moudules 
    //
    def sourcePath
    def classdeployPath 

    deployMap.each {
	def (value1, value2) = "$it.value".tokenize( ',')
	println "jar Module Name: "+value1.minus("[") +" sourcepath path "+ value2.minus("]")	   
	sourcePath=value2.minus("]")
	ant.javac (srcDir:value2.minus("]"), destDir:"${rootDir}/distribution", failonerror: true, fork: true, classpath:configurations.antcompile.asPath) {
	    include(name:'**/*.java') 
	}	   
	
	// Create jar
	ant.jar(destfile: "${rootDir}/distribution/"+value1.minus("[")+"-"+getVersion()+".jar") {	       
	    fileset(dir:"distribution/"+sourcePath)
	}
	
    }
}







 


 





