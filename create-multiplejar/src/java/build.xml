<?xml version="1.0" ?>

<!-- Ant buildfile for Formsdirect common Java Files -->
<!-- $Author$ -->
<!-- $Id$ -->
<!-- $Date$ -->
<!-- $Rev$ -->

<project name="fd-commons" default="dev" basedir=".">
  <description>Compiles and builds the common classes for formsdirect</description>
  <property file="build.properties"/>
  <!-- property Names -->
  <property name="lib.dir" value="../../lib"/>
  <property name="files.java.dir" value="."/>
  <property name="schema.application.dir" value="../../schema/application"/>
  <property name="schema.interaction.dir" value="../../schema/interaction"/>
  <property name="files.java.dir.src" value="src"/>
  <property name="files.java.dir.com" value="com"/>
  <property name="files.java.dir.org" value="org"/>
  <property name="files.java.dir.hibernate.src" value="hibernate/src"/>
  <!-- // Property Names -->
  
  <!-- Set the Classpath -->

  <path id="classpath">
    <fileset dir="${lib.dir}/" includes="**/*.jar" />
    <fileset dir="${schema.application.dir}/${deploy.dir}" includes="*.jar"/>
    <fileset dir="${schema.interaction.dir}/${deploy.dir}" includes="*.jar"/>
  </path>
  <path id="hibernate.library">
    <fileset dir="${lib.dir}/" includes="**/*.jar" />
  </path>

  <!-- ant-contribs  -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"  classpath="${lib.dir}/ant-plugins/ant-contrib.jar"/>
  
  <!-- Define Tasks -->
  <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="hibernate.library"/>

  <!-- Delete the build directory -->
  <target name="clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <!-- Build common classes for dev -->
  <target name="dev" depends="dev-jar"/>

  <!-- Build common classes for QA -->
  <target name="qa" depends="qa-jar"/>

  <!-- Build common classes for production -->
  <target name="production" depends="production-jar"/>
  <!-- Archive compiled classes for production -->
  <target name="production-jar" depends="patch-jar">
    <jar destfile="${deploy.dir}/fd-commons.jar" basedir="${deploy.dir}/."
	 includes="**/*.class, **/*.xml" excludes="*.jar, org/**,com/jenkov/**,com/**/rules/**, local*.xml,com/formsdirectinc/security/CryptoDelegate.class,com/formsdirectinc/security/AESUtils.class,com/sun/**,com/serviceobjects/**,com/lowagie/**"/>
    <jar destfile="${deploy.dir}/rules.jar" basedir="${deploy.dir}"
	 includes="com/**/rules/**.class" excludes="*.jar,org/**"/>
    <antcall target="build-module-jars">
      <param name="feeder" value="com.formsdirectinc.ui.controller-tk-!com/**/ui/controllers/**.class?com.formsdirectinc.user-tk-!com/**/user/**.class?com.formsdirectinc.ui.interaction-tk-!com/**/ui/interaction/**/*.class?com.formsdirectinc.rules-tk-!com/**/rules/**/*.class?com.formsdirectinc.security-tk-!com/**/security/*.class?com.formsdirectinc.helpers.mail-tk-!com/**/helpers/mail/*.class?com.formsdirectinc.securityobject-tk-!com/**/security/*.class?com.formsdirectinc.validations-tk-!com/**/validations/*.class" />
    </antcall>
    <antcall target="build-module-exclude-jars">
      <param name="feeder" value="com.formsdirectinc.pdf-tk-!com/**/pdf/**/*.class!com/**/efiling/**/*.class,com/lowagie/text/**/*.class" />
    </antcall>
  </target>
  <!-- Archive compiled classes for QA -->
  <target name="qa-jar" depends="patch-jar">
    <jar destfile="${deploy.dir}/fd-commons.jar" basedir="${deploy.dir}/."
	 includes="**/*.class, **/*.xml" excludes="*.jar, org/**,com/jenkov/**,com/**/rules/**,com/formsdirectinc/security/CryptoDelegate.class,com/formsdirectinc/security/AESUtils.class,com/sun/**,com/serviceobjects/**,com/lowagie/**"/>
    <jar destfile="${deploy.dir}/rules.jar" basedir="${deploy.dir}"
	 includes="com/**/rules/**.class" excludes="*.jar,org/**"/>
    <jar destfile="${deploy.dir}/CryptoDelegate.jar" basedir="${deploy.dir}" includes="com/formsdirectinc/security/CryptoDelegate.class,com/formsdirectinc/security/AESUtils.class"/>
    <antcall target="build-module-jars">
      <param name="feeder" value="com.formsdirectinc.ui.controller-tk-!com/**/ui/controllers/**.class?com.formsdirectinc.user-tk-!com/**/user/**.class?com.formsdirectinc.ui.interaction-tk-!com/**/ui/interaction/**/*.class?com.formsdirectinc.rules-tk-!com/**/rules/**/*.class?com.formsdirectinc.security-tk-!com/**/security/*.class?com.formsdirectinc.helpers.mail-tk-!com/**/helpers/mail/*.class?com.formsdirectinc.securityobject-tk-!com/**/security/*.class?com.formsdirectinc.validations-tk-!com/**/validations/*.class" />
    </antcall>

    <antcall target="build-module-exclude-jars">
      <param name="feeder" value="com.formsdirectinc.pdf-tk-!com/**/pdf/**/*.class!com/**/efiling/**/*.class,com/lowagie/text/**/*.class" />
    </antcall>
  </target>

  <!-- Archive compiled classes and sources, for development -->
  <target name="dev-jar" depends="patch-jar">
    <jar destfile="${deploy.dir}/fd-commons.jar" basedir="${deploy.dir}"
         includes="**/*.class, **/*.java, **/*.xml" excludes="com/**/rules/** ,org/**,com/jenkov/**,com/formsdirectinc/security/CryptoDelegate.class,com/formsdirectinc/security/AESUtils.class,com/sun/**,com/serviceobjects/**,com/lowagie/**"/>
    <jar destfile="${deploy.dir}/rules.jar" basedir="${deploy.dir}"
         includes="com/**/rules/**/*.class,com/**/rules/**/*.java" />
    <!-- generate jars for module -->
    <antcall target="build-module-jars">
      <param name="feeder" value="com.formsdirectinc.ui.controller-tk-!com/**/ui/controllers/**.class?com.formsdirectinc.user-tk-!com/**/user/**.class?com.formsdirectinc.ui.interaction-tk-!com/**/ui/interaction/**/*.class?com.formsdirectinc.rules-tk-!com/**/rules/**/*.class?com.formsdirectinc.security-tk-!com/**/security/*.class?com.formsdirectinc.helpers.mail-tk-!com/**/helpers/mail/*.class?com.formsdirectinc.securityobject-tk-!com/**/security/*.class?com.formsdirectinc.validations-tk-!com/**/validations/*.class" />
    </antcall>

    <antcall target="build-module-exclude-jars">
      <param name="feeder" value="com.formsdirectinc.pdf-tk-!com/**/pdf/**/*.class!com/**/efiling/**/*.class,com/lowagie/text/**/*.class" />
    </antcall>
    <!-- // -->
  </target>
  <!--
      Instead  of calling <jars ...> for multiple times, jar is called only once inside a for-loop where destfile path and includes are feeded together in the "for loop" list with the separate (!) to split them, dlimiter (,) is added at the end of each string.
       For example (com.formsdirect.validation-!com/**/rules/**/*.class?com.formsdirect.services-!com/**/validation/*.class)
  -->
  <target name="build-module-jars" description="Generating Jars for seperate modules..">
    <echo message="Generating Jars for seperate module.........." />
    <for list="${feeder}" param="jarsource" delimiter="?">
      <sequential>
        <propertyregex property="base.name" input="@{jarsource}" regexp="(.*)\!(.*)" select="\1" override="true" />
	<propertyregex property="suffix.name" input="@{jarsource}" regexp="(.*)\!(.*)" select="\2" override="true" />
	<jar destfile="${deploy.dir}/${base.name}${git.branch.name}.jar" basedir="${deploy.dir}/." includes="${suffix.name}" />
      </sequential>
    </for>
  </target>

  <target name="build-module-exclude-jars" >
    <!--
	Generate jar with exclude path!
    -->
    <for list="${feeder}" param="jarsource" delimiter="?">
      <sequential>
        <propertyregex property="base.name" input="@{jarsource}" regexp="(.*)\!(.*)\!(.*)" select="\1" override="true" />
	<propertyregex property="suffix.name" input="@{jarsource}" regexp="(.*)\!(.*)\!(.*)" select="\2" override="true" />
	<propertyregex property="exclude.name" input="@{jarsource}" regexp="(.*)\!(.*)\!(.*)" select="\3" override="true" />
	<jar destfile="${deploy.dir}/${base.name}${git.branch.name}.jar" basedir="${deploy.dir}/." includes="${suffix.name}" excludes="${exclude.name}" />
      </sequential>
    </for>
  </target>
  <target name="patch-jar" depends="compile">
    <!-- Run the patches parallely -->
    <parallel> 
      <antcall target="patch-taglib-jar"/>
      <antcall target="patch-jenkov-jar"/>
      <antcall target="patch-commons-beanutils-jar"/>
      <antcall target="patch-swlink-jar"/>
      <antcall target="basic-jar"/>
      <antcall target="addressValidation-jar"/>
      <antcall target="patch-itext-jar"></antcall>

    </parallel>
  </target>

  <target name="addressValidation-jar">
    <jar destfile="${deploy.dir}/addressValidation.jar" basedir="${deploy.dir}"
         includes="com/serviceobjects/www/**/*.class" excludes="com/**/rules/** ,org/**,com/jenkov/**,com/formsdirectinc/**,com/sun/**,com/lowagie/**"/>
  </target>


  <!-- Archive compiled classes for Basic types -->
  <target name="basic-jar">
    <jar destfile="${deploy.dir}/basic.jar" basedir="${deploy.dir}" 
         includes="com/formsdirectinc/schema/basictypes/**/*.class"/>
  </target>

  <!-- Copy the Patch jars to the jar directory -->

  <!-- Copy and patch taglib prize tags -->
  <target name="patch-taglib-jar" description="Coping and Patching taglibs-i18n.jar...">
    <copy file="${lib.dir}/taglib/taglibs-i18n.jar" tofile="${deploy.dir}/taglibs-i18n.jar"/>
    <zip destfile="${deploy.dir}/taglibs-i18n.jar"
         basedir="${deploy.dir}" includes="**/taglibs/**/*.class" excludes="com/**,**/*.jar,**/*.tmp" update="true"/>
  </target>

  <!-- Copy and patch jenkov prize tags -->
  <target name="patch-jenkov-jar" description="Coping and Patching
					       jenkov-prizetags-bin-2.5.0 jar...">
    <copy file="${lib.dir}/jenkov/jenkov-prizetags-bin-2.5.0.jar" 
          tofile="${deploy.dir}/jenkov-prizetags-bin-2.5.0.jar"/>

    <zip destfile="${deploy.dir}/jenkov-prizetags-bin-2.5.0.jar"
         basedir="${deploy.dir}" excludes="**/*.jar,**/*.tmp,com/com,**/com/formsdirectinc/**,PaymentAction.class,**/*.xml,org/**, **/*.java"  update="true"/>
  </target>

  <!-- Copy and patch taglib prize tags -->
  <target name="patch-commons-beanutils-jar" description="Coping and Patching commons-beanutils.jar...">
    <copy file="${lib.dir}/commons/commons-beanutils.jar" tofile="${deploy.dir}/commons-beanutils.jar"/>
    <zip destfile="${deploy.dir}/commons-beanutils.jar"
         basedir="${deploy.dir}" includes="**/commons/**/*.class" excludes="com/**,**/*.jar,**/*.tmp" update="true"/>
  </target>
  
  <!-- Copy and patch SWLink jar -->
  <target name="patch-swlink-jar" description="Copy and patch swlink jar with patches to clone beans">
    <copy file="${lib.dir}/swlink/swlink.jar" tofile="${deploy.dir}/swlink.jar"/>
    <zip destfile="${deploy.dir}/swlink.jar" 
	 basedir="${deploy.dir}" includes="com/iternum/swlink/action/PropertySyncAction.class" update="true"/>
  </target>

  <!-- Copy and patch iText jar -->
  <target name="patch-itext-jar" description="Copy and patch itext jar with XfaForm class update">
    <copy file="${lib.dir}/pdf/iText-2.1.7.jar" tofile="${deploy.dir}/iText-2.1.7.jar"/>
    <zip destfile="${deploy.dir}/iText-2.1.7.jar"
	 basedir="${deploy.dir}" includes="com/lowagie/text/pdf/XfaForm.class" update="true"/>
  </target>

  <!-- Compile classes present in the java directory -->
  <target name="compile" depends="copy, copy-hibernate-configuration">
    <echo message="Compiling Java Sources"/>
       <javac compiler="javac1.5" destdir="${deploy.dir}" nowarn="on" debug="on" srcdir="${deploy.dir}" includes="**/*.java">
	 <classpath refid="classpath" />
       </javac>
  </target>
  
  <target name="generate-hbm-java" depends="copy, copy-hibernate-configuration" description="Generates Hibernate Java Beans">
    <hibernatetool>
      <configuration configurationfile="${deploy.dir}/local.hibernate.cfg.xml"/>
      <hbm2java jdk5="true" destdir="${deploy.dir}"/>
      <hbm2dao destdir="${deploy.dir}" />
    </hibernatetool>
  </target>
  
  <!-- This generate-hbm-xml target should be used only once, after the
       hbm-xml files are all generated, some manual changes are
       required.-->

  <target name="generate-hbm-xml" description="Generates Hibernate
					       XML files from the database">
    <hibernatetool>
      <jdbcconfiguration packagename="com.formsdirectinc.user"
			 propertyfile="${files.java.dir}/hibernate/conf/hibernate.properties"/> 
      <hbm2cfgxml destdir="${files.java.dir}/hibernate/conf"/>
      <hbm2hbmxml destdir="."/>
    </hibernatetool>
  </target>

  <target name="copy-hibernate-configuration">
    <echo message="Hibernate configuration files"/>
    <copy tofile="${deploy.dir}/hibernate.cfg.xml" file="${files.java.dir}/hibernate.cfg.xml" />
  </target> 
  
  <!-- Copy src files to the build directory for update in jar in dev -->
  <target name="copy" depends="make-dirs" >

    <parallel>
      <copy todir="${deploy.dir}/com">
        <fileset dir="${files.java.dir.com}"/>
      </copy>

      <copy todir="${deploy.dir}/org">
        <fileset dir="${files.java.dir.org}"/>
      </copy>

    </parallel>
  </target>  

  <!-- Make the "build" directory -->
  <target name="make-dirs" depends="check-depends">
    <mkdir dir="${deploy.dir}"/>
  </target>

  <!-- check If there is any change in the src files and remove
       generated files if there is any change -->
  <target name="check-depends">
    <dependset>
      <srcfileset dir="." includes="**/*.java"/>
      <srcfileset dir="${deploy.dir}" includes="**/*.java"/>
      <srcfileset dir="."   file="build.xml"/>
      <targetfileset dir="${deploy.dir}" includes="**"/>
    </dependset>
  </target>

  <target name="junit" depends="qa-jar" description="Performs unit tests.">
    <javac srcdir="src/test" destdir="${deploy.dir}" deprecation="true" debug="on">
      <classpath refid="classpath"/>
    </javac> 
    <mkdir dir="src/temp"/>
    <mkdir dir="src/temp/JUnit"/>

    <junit failureproperty="junit.failed">
      <formatter type="xml"/>
      <batchtest todir="src/temp/JUnit">
        <fileset dir="build">
          <include name="**/*Test.class"/>
          <include name="**/Test*.class"/>
        </fileset>
      </batchtest>
      <classpath>
        <path refid="classpath"/>
        <pathelement location="build"/>
      </classpath>
    </junit>

    <junitreport tofile="TESTS-TestSuites.xml" todir="src/temp/JUnit">
      <fileset dir="src/temp/JUnit">
        <include name="TEST-*.xml"/>
      </fileset>
      <report todir="src/temp/JUnit"/>
    </junitreport>
    <!-- fail message="JUnit test failure." if="junit.failed"/ -->  
  </target>
</project>
