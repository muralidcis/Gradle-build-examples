//
//
//  Take the input from the file 
//  Determine which module jar to create
//  Inject the data from the file to list and convert it to a map  with the key and value 
//  Run a loop to compile and create jars based on the injected map. Dynamically add the include source and jar names
//  
//  before running the gradle task add the lib and source files matching
// gradle loadListtoMap
// gradle cleanjar
// gralde clean


apply plugin: 'java'

configurations {
    antcompile
}

// Dependencies
dependencies {
    // specify the lib files at compile and run time
    compile fileTree(dir: 'lib', include: ['**/*.jar','*.jar'])
    runtime fileTree(dir: 'lib', include: ['**/*.jar','*.jar'])
    antcompile fileTree(dir: 'lib', include: ['**/*.jar','*.jar'])
}

// return the git tag version
def getVersion = { ->
    try {
    	def stdout = new ByteArrayOutputStream()
	    exec {
		commandLine 'git', 'describe', '--tags', '--dirty'
		standardOutput = stdout
	    }
	return stdout.toString().trim()
    } catch (ignored) {
	return 'dev';
    }
		 }

// clean the dist and build folder
task cleanjar(type: Delete) {
    delete 'distribution','build'
}

// load list from the file
def sourceList=[]
def deployMap = [:]
def deployDist = new File('build/src/java')

task loadListtoMap {
    
    // Loading to sourcelist from source file   
    new File('module.txt').eachLine { line ->
    //  println line
    sourceList.add(line)
}
// create folder
delete 'build'
deployDist.mkdirs()

//
// Loading source-list to key value paired Map
//
sourceList.each{
    //Split up coma to create keyName for the map
    def (value1,value2) = "$it.value".tokenize( ',')
    //Adding List to map
    deployMap.put(value1,"$it.value")
}


//
// To perform compile java and create jars for the compiled modules
//
def sourcePath
deployMap.each {
    def (value1, value2) = "$it.value".tokenize( ',')
    println "Jar Module Name: "+value1.minus("[") +" source path"+ value2.minus("]")
    sourcePath=value2.minus("]")
    println sourcePath
    // Compiling the modules
    ant.javac (srcDir:value2.minus("]"), destDir:"build/src/java", failonerror: true, fork: true, classpath:configurations.antcompile.asPath) {
        include(name:'**/*.java')
    }
    // Create jar


// ant.jar(destfile:project.ant.destfile, basedir:project.ant."dist.dir")
    ant.jar(destfile: "build/"+value1.minus("[")+"-"+getVersion()+".jar"){
//        fileset(dir:"build/"+value2.minus("]"), includes:"**.class")
	  fileset(dir:"build/", includes:value2.minus("]")+'/**.class')
    }
 }
}



