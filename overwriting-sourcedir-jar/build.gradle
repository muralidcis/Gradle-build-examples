
apply plugin: 'java'

// Dependencies
dependencies { 
    // specify the lib files at compile and run time 	     
    compile fileTree(dir: 'lib', include: ['**/*.jar','*.jar'])
    runtime fileTree(dir: 'lib', include: ['**/*.jar','*.jar'])
}


// source path 
sourceSets {
    main {
        java {
	    srcDirs 'src'
        }
	
    }
}


// return the git tag version
def getVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (ignored) {
        return 'dev';
     }
}


task modulejar(type: Jar) {     
    destinationDir = file('dist/jar')
    baseName = 'module-'+getVersion()

    // Redefine where .class files are written
    sourceSets.main.output.classesDir = file("dist/classes")
    with jar

}


// clean the dist and build folder 
task cleanjar(type: Delete) {
    delete 'dist','build'
}






